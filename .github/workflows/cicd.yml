# 워크플로우의 이름
name: YouTube Summary CI/CD with Docker

# 언제 이 워크플로우를 실행할지 정의
on:
  push:
    branches: [ "master" ] # main 브랜치에 push 될 때 실행

# 실행될 작업(Job)들을 정의
jobs:
  build-and-deploy:
    # 이 작업은 우분투 최신 버전 환경에서 실행됨
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들을 정의
    steps:
      # 1. 소스 코드 체크아웃 (가져오기)
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드 (JAR 파일 생성)
      - name: Build with Gradle
        run: ./gradlew build

      # 5. Docker Hub 로그인 (나중에 등록할 Secrets를 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest
          build-args: |
            CACHE_BUSTER=${{ github.run_id }}

      # 7. EC2에 접속하여 배포 (나중에 등록할 Secrets를 사용)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: | # EC2 서버에서 실행될 스크립트
            # --- ▼▼▼ 쿠키 자동화 설정 추가 ▼▼▼ ---

            # 1. 비밀 정보가 담긴 실행 전용 스크립트(run-harvester.sh) 자동 생성
            # GitHub Secrets 값을 읽어서 EC2 서버에 파일로 만듭니다.
            echo "#!/bin/bash
            export YOUTUBE_EMAIL='${{ secrets.YOUTUBE_EMAIL }}'
            export YOUTUBE_PASSWORD='${{ secrets.YOUTUBE_PASSWORD }}'
            /usr/bin/node /home/ec2-user/cookie-harvester/get-cookies.js
            " > /home/ec2-user/cookie-harvester/run-harvester.sh

            # 2. 실행 권한 부여
            chmod +x /home/ec2-user/cookie-harvester/run-harvester.sh

            # 3. 주기적 실행을 위한 cron 작업 등록
            # 이제 cron은 비밀번호 없이, 안전한 스크립트 파일만 호출합니다.
            echo "0 0,12 * * * /home/ec2-user/cookie-harvester/run-harvester.sh > /home/ec2-user/cookie-harvester/cron.log 2>&1" | crontab -

            # 4. 배포 직후, 쿠키를 한 번 바로 생성
            echo "배포 후 즉시 쿠키 생성을 시도합니다..."
            /home/ec2-user/cookie-harvester/run-harvester.sh

            # --- ▲▲▲ 쿠키 자동화 설정 끝 ▲▲▲ ---

            # 최신 버전의 Docker 이미지 받아오기
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest
            
            # 기존에 실행 중인 컨테이너가 있으면 중지하고 삭제
            sudo docker stop youtube-summary-container || true
            sudo docker rm youtube-summary-container || true
            
            # 새 컨테이너 실행 (환경 변수 주입)
            sudo docker run -d --name youtube-summary-container -p 8080:8080 \
              -v /home/ec2-user/youtube-ai-summary/cookies.txt:/app/cookies.txt \
              -e "SPRING_PROFILES_ACTIVE=prod" \
              -e "DB_URL=${{ secrets.DB_URL }}" \
              -e "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              -e "PROXY_ENABLED=true" \
              -e "PROXY_URL=${{ secrets.PROXY_URL }}" \
              -e "SPRING_AI_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest