# 워크플로우의 이름
name: YouTube Summary CI/CD with Docker

# 언제 이 워크플로우를 실행할지 정의
on:
  push:
    branches: [ "main" ] # main 브랜치에 push 될 때 실행

# 실행될 작업(Job)들을 정의
jobs:
  build-and-deploy:
    # 이 작업은 우분투 최신 버전 환경에서 실행됨
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들을 정의
    steps:
      # 1. 소스 코드 체크아웃 (가져오기)
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드 (JAR 파일 생성)
      - name: Build with Gradle
        run: ./gradlew build

      # 5. Docker Hub 로그인 (나중에 등록할 Secrets를 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest

      # 7. EC2에 접속하여 배포 (나중에 등록할 Secrets를 사용)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: | # EC2 서버에서 실행될 스크립트
            # Docker 설치 (최초 배포 시 또는 서버에 Docker가 없을 경우)
            if ! [ -x "$(command -v docker)" ]; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
            fi
            
            # 최신 버전의 Docker 이미지 받아오기
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest
            
            # 기존에 실행 중인 컨테이너가 있으면 중지하고 삭제
            docker stop youtube-summary-container || true
            docker rm youtube-summary-container || true
            
            # 새 컨테이너 실행 (GitHub Secrets를 환경 변수로 주입)
            docker run -d --name youtube-summary-container -p 8080:8080 \
              -e spring.datasource.url='${{ secrets.DB_URL }}' \
              -e spring.datasource.username='${{ secrets.DB_USERNAME }}' \
              -e spring.datasource.password='${{ secrets.DB_PASSWORD }}' \
              -e spring.ai.openai.api-key='${{ secrets.OPENAI_API_KEY }}' \
              ${{ secrets.DOCKERHUB_USERNAME }}/youtube-ai-summary:latest