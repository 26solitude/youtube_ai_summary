package org.example.youtubeaisummary.service.subtitle;


import io.github.thoroldvix.api.*;
import org.example.youtubeaisummary.dto.JobStatusDto;
import org.example.youtubeaisummary.exception.subtitle.NoSubtitlesFoundException;
import org.example.youtubeaisummary.exception.subtitle.YoutubeApiException;
import org.example.youtubeaisummary.vo.YoutubeVideo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.stream.StreamSupport;

@Service("youtubeApi")
public class YoutubeApiSubtitleService extends AbstractSubtitleService {
    private static final Logger logger = LoggerFactory.getLogger(SubtitleService.class);
    private final YoutubeTranscriptApi api;

    public YoutubeApiSubtitleService(YoutubeTranscriptApi api) {
        this.api = api;
    }

    @Override
    @Async("ioTaskExecutor")
    public CompletableFuture<String> fetchSubs(String jobId, YoutubeVideo video) {
        String videoId = video.getVideoId();

        return CompletableFuture.supplyAsync(() -> {
            try {
                updateJobProgress(jobId, JobStatusDto.JobStatus.SUBTITLE_EXTRACTING, "자막 추출을 시작합니다...");

                // --- 1. 자막 목록 가져오기 ---
                TranscriptList transcriptList;
                try {
                    transcriptList = api.listTranscripts(videoId);
                } catch (TranscriptRetrievalException e) {
                    logger.warn("자막 목록 조회 중 오류 (Job ID: {}): {}", jobId, e.getMessage());
                    if (e.getMessage() != null && (e.getMessage().toLowerCase().contains("video unavailable") || e.getMessage().toLowerCase().contains("not found"))) {
                        throw new NoSubtitlesFoundException("영상을 찾을 수 없거나 접근할 수 없습니다.", e);
                    } else if (e.getMessage() != null && e.getMessage().toLowerCase().contains("subtitles disabled")) {
                        throw new NoSubtitlesFoundException("이 영상에는 자막 기능이 비활성화되어 있습니다.", e);
                    }
                    throw new YoutubeApiException("유튜브 자막 목록 조회 중 오류가 발생했습니다: " + e.getMessage(), e);
                } catch (RuntimeException e) {
                    logger.error("자막 목록 조회 중 예기치 않은 런타임 오류 (Job ID: {}): {}", jobId, e.getMessage(), e);
                    throw new YoutubeApiException("유튜브 자막 목록 조회 중 예기치 못한 오류가 발생했습니다.", e);
                }

                if (transcriptList == null) {
                    throw new YoutubeApiException("유튜브로부터 자막 목록을 가져오지 못했습니다 (null 응답).");
                }

                // --- 2. 자동 생성 자막 찾기 ---
                Optional<Transcript> autoGeneratedTranscript = StreamSupport.stream(transcriptList.spliterator(), false)
                        .filter(Transcript::isGenerated)
                        .findFirst();

                if (autoGeneratedTranscript.isEmpty()) {
                    throw new NoSubtitlesFoundException("이 영상에는 자동 생성된 자막이 없습니다.");
                }

                // --- 3. 자막 내용 가져오기 ---
                TranscriptContent transcriptContent;
                try {
                    transcriptContent = autoGeneratedTranscript.get().fetch();
                } catch (TranscriptRetrievalException e) {
                    logger.warn("자막 내용 추출 중 오류 (Job ID: {}): {}", jobId, e.getMessage());
                    throw new YoutubeApiException("자막 내용을 가져오는 중 오류가 발생했습니다: " + e.getMessage(), e);
                } catch (RuntimeException e) {
                    logger.error("자막 내용 추출 중 예기치 않은 런타임 오류 (Job ID: {}): {}", jobId, e.getMessage(), e);
                    throw new YoutubeApiException("자막 내용을 가져오는 중 예기치 못한 오류가 발생했습니다.", e);
                }

                if (transcriptContent == null) {
                    throw new YoutubeApiException("자막 내용을 가져오지 못했습니다 (null 응답).");
                }

                TranscriptFormatter textFormatter = TranscriptFormatters.textFormatter();
                String result = textFormatter.format(transcriptContent);

                // --- 4. 결과 포맷팅 및 최종 처리 ---
                updateJobProgress(jobId, JobStatusDto.JobStatus.SUBTITLE_EXTRACTION_COMPLETED, result);
                return result;

            } catch (NoSubtitlesFoundException | YoutubeApiException e) {
                logger.warn("자막 처리 실패 (Job ID: {}): {}", jobId, e.getMessage(), e);
                handleFailure(jobId, e.getMessage(), e);
                throw e;
            } catch (Exception e) {
                String defaultErrorMessage = "자막 처리 중 예상치 못한 서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.";
                logger.error("자막 처리 중 예상치 못한 심각한 오류 발생 (Job ID: {}): {}", jobId, e.getMessage(), e);
                handleFailure(jobId, defaultErrorMessage, e);
                throw new RuntimeException(defaultErrorMessage, e);
            }
        });
    }
}