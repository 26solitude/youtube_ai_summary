package org.example.youtubeaisummary.service;


import io.github.thoroldvix.api.*;
import org.example.youtubeaisummary.dto.JobStatusDto;
import org.example.youtubeaisummary.repository.InMemoryJobRepository;
import org.example.youtubeaisummary.vo.YoutubeVideo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.stream.StreamSupport;

@Service
public class SubtitleService {
    private static final Logger logger = LoggerFactory.getLogger(SubtitleService.class);
    private final YoutubeTranscriptApi api;
    private final InMemoryJobRepository jobRepository;
    private final SseNotificationService sseNotificationService;

    public SubtitleService(YoutubeTranscriptApi api, InMemoryJobRepository jobRepository, SseNotificationService sseNotificationService) {
        this.api = api;
        this.jobRepository = jobRepository;
        this.sseNotificationService = sseNotificationService;
    }

    @Async("subtitleTaskExecutor")
    public void fetchSubs(String jobId, YoutubeVideo video) {
        String currentStepMessage = "작업 처리 중...";
        try {
            currentStepMessage = "자막 추출을 시작합니다...";
            jobRepository.updateJob(jobId, JobStatusDto.JobStatus.PROCESSING, currentStepMessage);
            sseNotificationService.sendEvent(jobId, "progress", new JobStatusDto(jobId, JobStatusDto.JobStatus.PROCESSING, currentStepMessage));

            String videoId = video.getVideoId();
            TranscriptList transcriptList = api.listTranscripts(videoId);

            Optional<Transcript> autoGeneratedTranscript = StreamSupport.stream(transcriptList.spliterator(), false)
                    .filter(Transcript::isGenerated)
                    .findFirst();

            if (autoGeneratedTranscript.isEmpty()) {
                throw new RuntimeException("이 영상에는 자동 생성된 자막이 없습니다.");
            }

            currentStepMessage = "자막 정보를 가져왔습니다. 내용 추출 중...";
            sseNotificationService.sendEvent(jobId, "progress", new JobStatusDto(jobId, JobStatusDto.JobStatus.PROCESSING, currentStepMessage));
            jobRepository.updateJob(jobId, JobStatusDto.JobStatus.PROCESSING, currentStepMessage);

            TranscriptContent transcriptContent = autoGeneratedTranscript.get().fetch();
            TranscriptFormatter textFormatter = TranscriptFormatters.textFormatter();
            String result = textFormatter.format(transcriptContent);

            // --- (여기에 AI 요약 로직 추가 ---

            jobRepository.updateJob(jobId, JobStatusDto.JobStatus.COMPLETED, result);
            sseNotificationService.sendEvent(jobId, "complete", new JobStatusDto(jobId, JobStatusDto.JobStatus.COMPLETED, result));
            sseNotificationService.completeStream(jobId); // SSE 스트림 정상 종료

        } catch (Exception e) {
            logger.error("자막 처리 작업 중 오류 발생 (Job ID: {}): {}", jobId, e.getMessage(), e);
            jobRepository.updateJob(jobId, JobStatusDto.JobStatus.FAILED, e.getMessage());
            sseNotificationService.sendEvent(jobId, "error", new JobStatusDto(jobId, JobStatusDto.JobStatus.FAILED, e.getMessage()));
            sseNotificationService.errorStream(jobId, e); // SSE 스트림 오류 종료
        }
    }
}